package mx.itesm.ecore.web;

import java.beans.Introspector;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.lang.reflect.Method;
import java.net.ConnectException;
import java.util.List;

import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import mx.itesm.ecore.domain.LocalEntity;
import mx.itesm.ecore.domain.RemoteEntity;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder; 
import org.jdom.output.XMLOutputter;
import org.jdom.xpath.XPath;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

@RequestMapping("/$type.toLowerCase()" + "s")
@Controller
public class EcoreController$type {

	private static XMLOutputter out = new XMLOutputter();

	@Autowired
    private RestTemplate restTemplate;
    
    @Autowired
    private Marshaller marshaller;
    
    @Autowired
    private Unmarshaller unmarshaller;
    
    @RequestMapping(value = "/create/$type.toLowerCase()", method = RequestMethod.PUT)
    public void create(@RequestBody $imbTypePackage.$type object) {
        System.out.println("Creando instancia en eclipse: " + object);
    }
    
    @RequestMapping(value = "/update/$type.toLowerCase()/{id}", method = RequestMethod.POST)
    public boolean update(@PathVariable("id") Long id, @RequestBody $imbTypePackage.$type object) {
    	//TODO: Fix file resolution!!:.
    	try {
    		this.mergeWithLocal(id, object, new File("/Users/jccastrejon/java/runtime-EclipseApplication/TodoList/My.todolist"));
    	} catch(Exception e) {
    		System.out.println("Error while updating: " + e.getMessage());
    	}
    	return true;
    }
    
    @RequestMapping(value = "/delete/$type.toLowerCase()/{id}", method = RequestMethod.DELETE)
    public void delete(@PathVariable("id") Long id) {
    	System.out.println("Borrando instancia en eclipse: " + id);
    }
    
    
    /**
    * Merge the changes made to an instance
    */
    private void mergeWithLocal(Long imbId, $imbTypePackage.$type object, final File xmlFile) throws Exception {
    	Element instance;
        XPath instancePath;
        Document rootDocument;
        SAXBuilder saxBuilder;
    	boolean valueSet;
    	Object localValue;
    	Object remoteValue;
    	Object currentValue;
    	String propertyName;
    	$imbTypePackage.$type localObject;
    	$imbTypePackage.$type remoteObject;
    	List<LocalEntity> localEntities;
    	List<RemoteEntity> remoteEntities;
    	
    	// Locate the corresponding instance in the XML file
        saxBuilder = new SAXBuilder();
        rootDocument = saxBuilder.build(xmlFile);
        instancePath = XPath.newInstance("//*[@imbId='" + imbId + "']");
        instance = (Element) instancePath.selectSingleNode(rootDocument);
    	
    	// The instance should already exist, otherwise this wouldn't be a merge!
    	if (instance != null) {
	    	localObject = null;
    		localEntities = LocalEntity.findLocalEntitysByImbId(imbId).getResultList();
    		if((localEntities != null) && (!localEntities.isEmpty())) {
				for(LocalEntity local : localEntities) {
    				if(local.getImbId().equals(imbId)) {
	    				localObject = ($imbTypePackage.$type) unmarshaller.unmarshal(new StreamSource(new ByteArrayInputStream(local.getEntity().getBytes("UTF-8"))));
    					break;
	    			}
    			}
    		}
    	

	    	remoteObject = null;
    		remoteEntities = RemoteEntity.findRemoteEntitysByImbId(imbId).getResultList();
    		if((remoteEntities != null) && (!remoteEntities.isEmpty())) {
				for(RemoteEntity remote : remoteEntities) {
    				if(remote.getImbId().equals(imbId)) {
    					remoteObject = ($imbTypePackage.$type) unmarshaller.unmarshal(new StreamSource(new ByteArrayInputStream(remote.getEntity().getBytes("UTF-8"))));
	    				break;
	    			}
    			}
    		}
    	
    		for(Method method : $imbTypePackage.$type. class.getDeclaredMethods()) {
    			if(method.getName().startsWith("get")) {
    				// Corresponding setter method
    				propertyName = Introspector.decapitalize(method.getName().replace("get", ""));
    				
    				// Get the different values for the current property
    				currentValue = method.invoke(object);
    				localValue = null;
    				remoteValue = null;
    				
    				if(currentValue != null) {
    				    currentValue = method.invoke(object);
    				}
    				
    				if(localObject != null) {
    					localValue = method.invoke(localObject);
    				}
    				
            	    if(remoteObject != null) {
            	    	remoteValue = method.invoke(remoteObject);
            	    }
            	    
            	    // Concurrency controls
            	    
            	    // Only one valid value
            	    valueSet = false;
            	    if((currentValue != null) && (localValue == null) && (remoteValue == null)) {
            	    	valueSet = true;
            	    	instance.setAttribute(propertyName, currentValue.toString());
            	    } else if((currentValue == null) && (localValue != null) && (remoteValue == null)) {
            	    	valueSet = true;
            	    	instance.setAttribute(propertyName, localValue.toString());
            	    } else if((currentValue == null) && (localValue == null) && (remoteValue != null)) {
            	    	valueSet = true;
            	    	instance.setAttribute(propertyName, remoteValue.toString());
            	    }
            	    
            	    if(!valueSet) {
    	        	    // For this purpose, null and "" are equivalent
	            	    if(currentValue == null) {
            	    		currentValue = "";
            		    } if(localValue == null) {
            		    	localValue = "";
        	    	    } if(remoteValue == null) {
    	        	    	remoteValue = "";
	            	    }
            	    
            			// If the currentValue is different from the local one, 
            		    // we save it, overriding any possible change in the remote state
        	    	    // (override remote value)
    	        	    else if(!currentValue.equals(localValue)) {
    	        	    	instance.setAttribute(propertyName, currentValue.toString());	
            	    	}
            	    
            		    // If both the current and local values are the same, and there's 
        	    	    // a remote value, save it, this property was updated by another tool
    	        	    // (override local value)
	            	    else if(currentValue.equals(localValue)) {
	            	    	instance.setAttribute(propertyName, remoteValue.toString());
            		    }
            	    
            		    // There were not changes in the property value
        	    	    else {
        	    	    	instance.setAttribute(propertyName, localValue.toString());
	            	    }
            	    }
	    		}
    		}
    		
    		// Save changes
    		out.output(rootDocument, new FileWriter(xmlFile));
    	}    	
    }
}