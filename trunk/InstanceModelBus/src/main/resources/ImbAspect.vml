package $controllerPackage;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.lang.reflect.Method;
import java.net.ConnectException;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Random;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import javax.servlet.http.HttpServletRequest;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

import $typePackage.$type;
import $typePackage. LocalEntity;
import $typePackage. RemoteEntity;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

@Configurable
privileged aspect $controllerType.toString()_Roo_Imb {

    @Autowired
    private RestTemplate restTemplate;
    
    @Autowired
    Marshaller marshaller;

    @Autowired
    Unmarshaller unmarshaller;
    
    
    // Imb Id
    private Long $type. imbId;
    
    public Long $type. getImbId() {
    	return this.imbId;
    }
    
    public void $type. setImbId(final Long imbId) {
    	this.imbId = imbId;
    }
    
    public static $type $type. findByImbId(Long imbId) {
        TypedQuery<$type> query;
        EntityManager entityManager;        
        
        entityManager = Item.entityManager();
        query = entityManager.createQuery("SELECT $type FROM $type AS object WHERE object.imbId = :imbId", $type. class);
        query.setParameter("imbId", imbId);
        return query.getSingleResult();
    }
    
    // Keep the original state of an instance before it is edited
    after(Long id, Model model) returning :
    	execution (* ($controllerPackage.$controllerType).updateForm(..)) && args(id, model) {
    	Object imbType;
    	LocalEntity localEntity;
    	ByteArrayOutputStream outputStream;
    	
    	try {
    		imbType = $controllerType.toString()_Roo_Imb. transformToImb$type ($type. find$type(id));
    		outputStream = new ByteArrayOutputStream();
	    	marshaller.marshal(imbType, new StreamResult(outputStream));
    	
    		// We only keep a local copy of any type at any given time 
    		$controllerType.toString()_Roo_Imb. removeLocalEntities();
    	
    		// Save new local copy
    		localEntity = new LocalEntity();
    		localEntity.setEntityName("$type");
    		localEntity.setEntityId(id);
	    	localEntity.setValidity(new Date());
    		localEntity.setEntity(new String(outputStream.toByteArray(), "UTF-8"));
    		localEntity.persist();
    	} catch(Exception e) {
    		System.out.println("Unable to register local copy of $type: " + e.getMessage());
    	}
    }
    
    // Discard original states if the user goes to another page besides edition
    after() returning :
    	execution (* ($controllerPackage.$controllerType).createForm(..)) {
    	$controllerType.toString()_Roo_Imb. removeLocalEntities();
    }
    
    after() returning :
    	execution (* ($controllerPackage.$controllerType).list(..)) {
    	$controllerType.toString()_Roo_Imb. removeLocalEntities();
    }
    

	// Communication from the Application to the Imb bus
	
	after($type object, BindingResult result, Model model, HttpServletRequest request) returning : 
		execution (* ($controllerPackage.$controllerType).create(..)) && args(object, result, model, request) {
		try {
			// Set IMB Id before communicating with the IMB bus
			object.setImbId(System.currentTimeMillis() + new Random().nextInt());
			object.merge();
		
			restTemplate.put("$imbAddress" + "/imb/create/{object}/Spring", 
				$controllerType.toString()_Roo_Imb. transformToImb$type (object), "$type.toLowerCase()");
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	after($type object, BindingResult result, Model model, HttpServletRequest request) returning : 
		execution (* ($controllerPackage.$controllerType).update(..)) && args(object, result, model, request) {
		try {
			restTemplate.postForObject("$imbAddress" + "/imb/update/{object}/Spring/{id}", 
				$controllerType.toString()_Roo_Imb. transformToImb$type (object), Boolean.class, "$type.toLowerCase()", object.getImbId());
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	after(Long id, Integer page, Integer size, Model model) returning : 
		execution (* ($controllerPackage.$controllerType).delete(..)) && args(id, page, size, model) {
		try {
			restTemplate.delete("$imbAddress" + "/imb/delete/{object}/Spring/{id}", "$type.toLowerCase()", $type. find$type (id).getImbId());
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	// Communication from the Imb bus to the Application
	
    @RequestMapping(value = "/create/$type.toLowerCase()", method = RequestMethod.PUT)
    public void ItemController.imbCreate(@RequestBody $imbTypePackage.$type object) {
        $type modelObject;
        
        modelObject = $controllerType.toString()_Roo_Imb. transformFromImb$type (object);
        modelObject.persist();
    }
    
    @RequestMapping(value = "/update/$type.toLowerCase()/{id}", method = RequestMethod.POST)
    public boolean ItemController.imbUpdate(@PathVariable("id") Long id, @RequestBody $imbTypePackage.$type object) {
        $type remoteObject;
        $type localObject;
        
        remoteObject = $controllerType.toString()_Roo_Imb. transformFromImb$type (object);
        localObject = $type. findByImbId(remoteObject.getImbId());
        
        // TODO: Concurrency controls
        
        localObject.merge();
        return true;
    }
    
    @RequestMapping(value = "/delete/$type.toLowerCase()/{id}", method = RequestMethod.DELETE)
    public void ItemController.imbDelete(@PathVariable("id") Long id) {
        $type. findByImbId(id).remove();
    }
    
    /**
    * Helper method to transform from an IMB Bus object
    * to a Spring Roo instance.
    */
    public static $type transformFromImb$type($imbTypePackage.$type object) {
    	return ($type)$controllerType.toString()_Roo_Imb. transformObjects(object, $type. class);
    }
	
	/**
	* Helper method to transform an Spring Roo object to an instance 
	* that can be used for communications with the IMB Bus.
	*/
	public static $imbTypePackage.$type transformToImb$type($type object) {
        return ($imbTypePackage.$type)$controllerType.toString()_Roo_Imb. transformObjects(object, $imbTypePackage.$type. class);
    }
    
    /**
    * Transform between object representations
    */
    private static Object transformObjects(final Object fromObject, final Class<?> toClass) {
    	Object enumValue;
    	Object returnValue;
    	Method enumValueOf;
    	Method returnValueSetMethod;
        Object objectMethodReturnValue;
    	
        try {
            returnValue = toClass.newInstance();
            for (Method method : fromObject.getClass().getDeclaredMethods()) {
                if (method.getName().startsWith("get")) {
                    returnValueSetMethod = null;
                    objectMethodReturnValue = method.invoke(fromObject, (Object[]) new Class<?>[0]);
                    for (Method returnValueMethod : toClass.getDeclaredMethods()) {
                        if (returnValueMethod.getName().equals(method.getName().replace("get", "set"))) {
                            returnValueSetMethod = returnValueMethod;
                            break;
                        }
                    }

                    if ((returnValueSetMethod != null) && (objectMethodReturnValue != null)) {
                        // Enum
                        if (method.getReturnType().isEnum()) {
                        	enumValue = null;
                        	enumValueOf = returnValueSetMethod.getParameterTypes()[0].getDeclaredMethod("values");
                        	for(Object value : (Object[])enumValueOf.invoke(null)) {
                        		if(value.toString().toUpperCase().equals(objectMethodReturnValue.toString().toUpperCase())) {
                        			enumValue = value;
                        			break;
                        		}
                        	}
                        	
                            returnValueSetMethod.invoke(returnValue, enumValue);
                        }

                        // Date
                        else if (Date.class.isAssignableFrom(method.getReturnType())) {
                            GregorianCalendar calendar = new GregorianCalendar();
                            calendar.setTime((Date) objectMethodReturnValue);
                            returnValueSetMethod.invoke(returnValue, DatatypeFactory.newInstance()
                                    .newXMLGregorianCalendar(calendar));
                        }
                        
                        // Calendar
                        else if(XMLGregorianCalendar.class.isAssignableFrom(method.getReturnType())) {
                        	returnValueSetMethod.invoke(returnValue, ((XMLGregorianCalendar)objectMethodReturnValue).toGregorianCalendar().getTime());
                        }

                        // Simple types
                        else {
                            returnValueSetMethod.invoke(returnValue, objectMethodReturnValue);
                        }
                    }
                }
            }
        } catch (Exception e) {
        	System.out.println("Unable to transform from: " + fromObject + ", to: " + toClass + ": " + e.getMessage());
            returnValue = null;
        }
        
        return returnValue;
    }
    
    /**
    * Remove all local states
    */
    private static void removeLocalEntities() {
    	for(LocalEntity localEntity : LocalEntity.findAllLocalEntitys()) {
    		localEntity.remove();
    	}
    }
}