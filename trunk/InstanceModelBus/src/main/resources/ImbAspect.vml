
package $controllerPackage;

import java.lang.reflect.Method;
import java.util.Date;
import java.util.GregorianCalendar;
import java.net.ConnectException;

import javax.servlet.http.HttpServletRequest;
import javax.xml.datatype.DatatypeFactory;

import $typePackage.$type;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.client.RestTemplate;

@Configurable
public aspect $controllerType.toString()_Roo_Imb {

    @Autowired
    private RestTemplate restTemplate;

	// Communication from the Application to the Imb bus
	
	after($type object, BindingResult result, Model model, HttpServletRequest request) returning : 
		execution (* ($controllerPackage.$controllerType).create(..)) && args(object, result, model, request) {
		try {
			restTemplate.put("$imbAddress" + "/imb/create/{object}", 
				$controllerType.toString()_Roo_Imb. convertToImb$type (object), "$type.toLowerCase()");
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	after($type object, BindingResult result, Model model, HttpServletRequest request) returning : 
		execution (* ($controllerPackage.$controllerType).update(..)) && args(object, result, model, request) {
		try {
			restTemplate.postForObject("$imbAddress" + "/imb/update/{object}/{id}", 
				$controllerType.toString()_Roo_Imb. convertToImb$type (object), Boolean.class, "$type.toLowerCase()", object.getId());
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	after(Long id, Integer page, Integer size, Model model) returning : 
		execution (* ($controllerPackage.$controllerType).delete(..)) && args(id, page, size, model) {
		try {
			restTemplate.delete("$imbAddress" + "/imb/delete/{object}/{id}", "$type.toLowerCase()", id);
		} catch(Exception e) {
			// Retry connection
			if(ConnectException.class.isAssignableFrom(e.getClass())) {
				System.out.println("Unable to communicate with the bus, will try again later");
			}
		}
	}
	
	// Communication from the Imb bus to the Application
	
    @RequestMapping(value = "/create/$type.toLowerCase()", method = RequestMethod.PUT)
    public void ItemController.imbCreate(@RequestBody $imbTypePackage.$type object) {
        System.out.println("Creando en roo: " + object);
    }
    
    @RequestMapping(value = "/update/$type.toLowerCase()/{id}", method = RequestMethod.POST)
    public boolean ItemController.imbUpdate(@PathVariable("id") Long id, @RequestBody $imbTypePackage.$type object) {
        System.out.println("Actualizando en roo: " + id + ", " + object);
        return true;
    }
    
    @RequestMapping(value = "/delete/$type.toLowerCase()/{id}", method = RequestMethod.DELETE)
    public void ItemController.imbDelete(@PathVariable("id") Long id) {
        System.out.println("Borrando en roo: " + id);
    }
	
	/**
	* Helper method to convert an object to an instance 
	* that can be used for communications with the IMB Bus.
	*/
	public static $imbTypePackage.$type convertToImb$type($type object) {
        Method returnValueSetMethod;
        Object objectMethodReturnValue;
        $imbTypePackage.$type returnValue;

        try {
            returnValue = new $imbTypePackage.$type();

            for (Method method : object.getClass().getDeclaredMethods()) {
                if (method.getName().startsWith("get")) {
                    returnValueSetMethod = null;
                    objectMethodReturnValue = method.invoke(object, (Object[]) new Class<?>[0]);
                    for (Method returnValueMethod : $imbTypePackage.$type. class.getDeclaredMethods()) {
                        if (returnValueMethod.getName().equals(method.getName().replace("get", "set"))) {
                            returnValueSetMethod = returnValueMethod;
                            break;
                        }
                    }

                    if ((returnValueSetMethod != null) && (objectMethodReturnValue != null)) {
                        // Enum
                        if (method.getReturnType().isEnum()) {
                            returnValueSetMethod.invoke(
                                    returnValue,
                                    returnValueSetMethod.getParameterTypes()[0].getDeclaredMethod("valueOf",
                                            String.class)
                                            .invoke(null, objectMethodReturnValue.toString().toUpperCase()));
                        }

                        // Date
                        else if (Date.class.isAssignableFrom(method.getReturnType())) {
                            GregorianCalendar calendar = new GregorianCalendar();
                            calendar.setTime((Date) objectMethodReturnValue);
                            returnValueSetMethod.invoke(returnValue, DatatypeFactory.newInstance()
                                    .newXMLGregorianCalendar(calendar));
                        }

                        // Simple types
                        else {
                            returnValueSetMethod.invoke(returnValue, objectMethodReturnValue);
                        }
                    }
                }
            }
        } catch (Exception e) {
            if (e.getCause() != null) {
                e.getCause().printStackTrace();
            }
            e.printStackTrace();
            returnValue = null;
        }

        return returnValue;
    }
}