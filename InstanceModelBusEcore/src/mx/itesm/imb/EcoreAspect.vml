
package $packageName;

import java.lang.reflect.Method;

#if ($generateHelperMethod)
import java.util.Date;
import java.util.GregorianCalendar;
import javax.xml.datatype.DatatypeFactory;
#end

import java.net.ConnectException;
import java.util.Random;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.web.client.RestTemplate;

#if ($generateHelperMethod)
import $typePackage.$typeName.replace("ItemProvider", "");
#end

public aspect EcoreAspect_$typeName {
    private static RestTemplate restTemplate;

    static {
        ApplicationContext applicationContext = new ClassPathXmlApplicationContext("beans.xml");
        restTemplate = applicationContext.getBean("restTemplate", RestTemplate.class);
    }

	after(Notification notification) returning: execution (* ($packageName.$typeName).notifyChanged(..)) && args(notification) {
		Object imbType;
		Object oldValue;
		Object newValue;
		Object notifier;
		Method idMethod;
		String referenceName;
		String containingClass;
		EReference changeReference;
		String[] referenceNameParts;
		
		notifier = notification.getNotifier();
		oldValue = notification.getOldValue();
		newValue = notification.getNewValue();
		switch(notification.getEventType()) {
			case Notification.ADD:
				if(EReference.class.isAssignableFrom(notification.getFeature().getClass())) {
					try {
						changeReference = ((EReference) notification.getFeature());
						referenceName = changeReference.getName();
						// Set IMB Id
						idMethod = Class.forName(changeReference.getEReferenceType().getInstanceClassName())
											.getMethod("setImbId", new Class[]{Long.class});
						idMethod.invoke(newValue, System.currentTimeMillis() + new Random().nextInt());
						
						// Convert to the appropriate Imb type
						imbType = EcoreAspect_$typeName. getImbType(referenceName, newValue);
						
						// Send to the Imb
						restTemplate.put("$imbAddress" + "/imb/create/{object}/Eclipse", imbType, referenceName.toLowerCase());
					} catch(Exception e) {
						// Retry connection
						if(ConnectException.class.isAssignableFrom(e.getClass())) {
							System.out.println("Unable to communicate with the bus, will try again later");
						}
					}
				}
			break;

			case Notification.SET:
				try {
					containingClass = ((EStructuralFeature)notification.getFeature()).getEContainingClass().getName();
				
					// Convert to appropriate Imb type
					imbType = EcoreAspect_$typeName. getImbType(containingClass, notifier);
				
					// Send to the Imb
					idMethod = notifier.getClass().getMethod("getImbId");
					restTemplate.postForObject("$imbAddress" + "/imb/update/{object}/Eclipse/{id}", imbType, Boolean.class, 
						containingClass.toLowerCase(), idMethod.invoke(notifier));
				} catch(Exception e) {
					// Retry connection
					if(ConnectException.class.isAssignableFrom(e.getClass())) {
						System.out.println("Unable to communicate with the bus, will try again later");
					}
				}
			break;
				
			case Notification.REMOVE:
				try {
					referenceName = oldValue.getClass().getName();
					referenceName = referenceName.replace("Impl", "");
					referenceNameParts = referenceName.split("\\.");
					referenceName = referenceNameParts[referenceNameParts.length-1].toLowerCase();
					idMethod = oldValue.getClass().getMethod("getImbId");
					restTemplate.delete("$imbAddress" + "/imb/delete/{object}/Eclipse/{id}", 
						referenceName, idMethod.invoke(oldValue));
				} catch(Exception e) {
					// Retry connection
					if(ConnectException.class.isAssignableFrom(e.getClass())) {
						System.out.println("Unable to communicate with the bus, will try again later");
					}
				}
			break;
		}
	}
	
	/**
	* Convert from an Ecore to an Imb type.
	*/
	private static Object getImbType(final String typeName, final Object typeInstance) throws Exception {
		Object returnValue;
		Method transformationMethod;
		
		transformationMethod = Class.forName("tl.provider" + ".EcoreAspect_" + typeName + "ItemProvider")
									.getMethod("convertToImb" + typeName, new Class[]{Class.forName("tl" + "." + typeName)});
		returnValue = transformationMethod.invoke(null, typeInstance);
		
		return returnValue;
	}
	
	
	#if ($generateHelperMethod)
		#helperMethod($imbTypePackage $typeName.replace("ItemProvider", ""))
	#end
	
	#macro (helperMethod $imbTypePackage $type)
	
	/**
	* Helper method to convert an object to an instance 
	* that can be used for communications with the IMB Bus.
	*/
	public static $imbTypePackage.$type convertToImb$type($type object) {
        Method returnValueSetMethod;
        Object objectMethodReturnValue;
        $imbTypePackage.$type returnValue;

        try {
            returnValue = new $imbTypePackage.$type();

            for (Method method : object.getClass().getDeclaredMethods()) {
                if (method.getName().startsWith("get")) {
                    returnValueSetMethod = null;
                    objectMethodReturnValue = method.invoke(object, (Object[]) new Class<?>[0]);
                    for (Method returnValueMethod : $imbTypePackage.$type. class.getDeclaredMethods()) {
                        if (returnValueMethod.getName().equals(method.getName().replace("get", "set"))) {
                            returnValueSetMethod = returnValueMethod;
                            break;
                        }
                    }

                    if ((returnValueSetMethod != null) && (objectMethodReturnValue != null)) {
                        // Enum
                        if (method.getReturnType().isEnum()) {
                            returnValueSetMethod.invoke(
                                    returnValue,
                                    returnValueSetMethod.getParameterTypes()[0].getDeclaredMethod("valueOf",
                                            String.class)
                                            .invoke(null, objectMethodReturnValue.toString().toUpperCase()));
                        }

                        // Date
                        else if (Date.class.isAssignableFrom(method.getReturnType())) {
                            GregorianCalendar calendar = new GregorianCalendar();
                            calendar.setTime((Date) objectMethodReturnValue);
                            returnValueSetMethod.invoke(returnValue, DatatypeFactory.newInstance()
                                    .newXMLGregorianCalendar(calendar));
                        }

                        // Simple types
                        else {
                            returnValueSetMethod.invoke(returnValue, objectMethodReturnValue);
                        }
                    }
                }
            }
        } catch (Exception e) {
            if (e.getCause() != null) {
                e.getCause().printStackTrace();
            }
            e.printStackTrace();
            returnValue = null;
        }

        return returnValue;
    }
    #end
    
}