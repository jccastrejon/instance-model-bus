--
-- Copyright 2011 jccastrejon
--  
-- This file is part of InstanceModelBus.
--
-- InstanceModelBus is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- any later version.
--
-- InstanceModelBus is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with InstanceModelBus.  If not, see <http://www.gnu.org/licenses/>.
--
module Ecore2ImbEcore;
create OUT: Ecore from IN: Ecore;

rule GenerateImbSystem {
	from
		input: Ecore!EPackage
	to
		output: Ecore!EPackage(
			name <- input.name,
			nsPrefix <- input.nsPrefix,
			nsURI <- input.nsURI,
			eClassifiers <- Set{system} 
							-> union(input.eClassifiers 
										-> collect(class| 
													if class.oclIsTypeOf(Ecore!EEnum)
														then thisModule.generateImbEnum(class)
														else thisModule.generateImbClass(class)
													endif))
			),
		system: Ecore!EClass(
			name <- 'System',
			eStructuralFeatures <- input.eClassifiers -> collect(class|
																	if not class.oclIsTypeOf(Ecore!EEnum)
																		then thisModule.generateSystemReference(class)
																		else Set{}
																	endif))
}

lazy rule generateSystemReference {
	from
		input: Ecore!EClass
	to
		output: Ecore!EReference(
			name <- input.name,
			upperBound <- -1,
			containment <- true,
			eType <- thisModule.getReferenceDataType(input.name)
			)
}

lazy rule getReferenceDataType {
	from
		input: String
	to
		output: Ecore!EDataType(
				name <- input,
				instanceClassName <- input
			)
}

lazy rule getSimpleDataType {
	from
		input: String
	to
		output: Ecore!EDataType(
				name <- input
			)
}

lazy rule generateImbEnum {
	from
		input: Ecore!EEnum
	to
		output: Ecore!EEnum(
				name <- input.name,
				eLiterals <- input.eLiterals 
								-> collect(literal| thisModule.generateImbLiteral(literal))
			)
}

lazy rule generateImbLiteral {
	from
		input: Ecore!EEnumLiteral
	to
		output: Ecore!EEnumLiteral(
				name <- input.name
			)
}

lazy rule generateImbClass {
	from
		input: Ecore!EClass
	to
		output: Ecore!EClass(
			name <- input.name,
			eStructuralFeatures <- Set{id} 
								-> union(input.eAttributes 
									-> collect(attribute| thisModule.generateImbAttribute(attribute)))
								-> union(input.eReferences
									-> collect(reference| thisModule.generateImbReference(reference)))
			),
		id: Ecore!EAttribute(
			name <- 'imbId',
			eType <- longType
			),
		longType: Ecore!EDataType(
				name <- 'ELongObject'
			)
}

lazy rule generateImbAttribute {
	from
		input: Ecore!EAttribute
	to
		output: Ecore!EAttribute(
			name <- input.name,
			eType <- thisModule.getSimpleDataType(input.eType.name)
			)
}

lazy rule generateImbReference {
	from
		input: Ecore!EReference
	to
		outpur: Ecore!EReference(
			name <- input.name,
			eType <- thisModule.getSimpleDataType(input.eType.name),
			lowerBound <- input.lowerBound
			)
}